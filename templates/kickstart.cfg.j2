
# PRE-INSTALLATION SCRIPT
%pre --interpreter=/usr/bin/bash --log=/root/anaconda-ks-pre.log
%end

# INSTALL USING CONFIGURABLE MODE
text

# KEYBOARDS, LANGUAGES, TIMEZONE
keyboard --vckeymap={{ proxmox_automatic_keyboard_layout }} --xlayouts='{{ proxmox_automatic_keyboard_variants }}'
lang {{ proxmox_automatic_language }}
timezone {{ proxmox_automatic_timezone }} --utc
{% if proxmox_automatic_ntp_servers %}
{% for ntp in proxmox_automatic_ntp_servers %}
timesource --ntp-server {{ ntp }}
{% endfor %}
{% endif %}

# NETWORK, SELINUX, FIREWALL
# Multi-interface network configuration with configurable interface naming
{% if proxmox_automatic_dhcp_enabled %}
{%   if proxmox_automatic_use_traditional_interface_names %}
network --bootproto=dhcp --device=eth0 --onboot=on --hostname={{ ansible_host }}
{%   else %}
network --bootproto=dhcp --device=enp6s18 --onboot=on --hostname={{ ansible_host }}
{%   endif %}
{% else %}
{%   for network in proxmox_automatic_networks %}
{%     if proxmox_automatic_use_traditional_interface_names %}
{%       set device = 'eth' + loop.index0|string %}
{%     else %}
{%       set device = 'enp6s' + (18 + loop.index0)|string %}
{%     endif %}
{%     if loop.first %}
network --bootproto=static --device={{ device }} --onboot=on --activate --ip={{ network.ip }} --netmask={{ network.netmask }} --gateway={{ network.gateway }} --nameserver={{ proxmox_automatic_dns_servers | join(',') }} --hostname={{ ansible_host }}
{%     else %}
network --bootproto=static --device={{ device }} --onboot=on --activate --ip={{ network.ip }} --netmask={{ network.netmask }}{% if network.gateway is defined %} --gateway={{ network.gateway }}{% endif %}
{%     endif %}
{%   endfor %}
{% endif %}

selinux --{{ proxmox_automatic_selinux_mode }}

{% if proxmox_automatic_firewall_enabled %}
firewall --enabled{% for service in proxmox_automatic_firewall_services %} --service={{ service }}{% endfor %}
{% else %}
firewall --disabled
{% endif %}

firstboot --disable

# DISKS, PARTITIONS, VOLUME GROUPS, LOGICAL VOLUMES
# Storage configuration is now dynamic based on proxmox_automatic_storage_config

{% set boot_storage = proxmox_automatic_storage_config | selectattr('bootloader', 'defined') | selectattr('bootloader') | first %}
{% set all_disks = proxmox_automatic_storage_config | selectattr('disk', 'defined') | map(attribute='disk') | list %}

# Global disk configuration
ignoredisk --only-use={{ all_disks | join(',') }}
zerombr

{% if boot_storage is defined %}
{% if proxmox_automatic_use_traditional_interface_names %}
bootloader --location=mbr --boot-drive={{ boot_storage.disk }} --append='rootdelay=300 console=ttyS0 no_timer_check crashkernel=auto net.ifnames=0 biosdevname=0'
{% else %}
bootloader --location=mbr --boot-drive={{ boot_storage.disk }} --append='rootdelay=300 console=ttyS0 no_timer_check crashkernel=auto'
{% endif %}
{% endif %}

{% for storage in proxmox_automatic_storage_config %}
{% if storage.disk is defined %}
# Storage device: {{ storage.name }} ({{ storage.disk }})

# Clear and prepare disk {{ storage.disk }}
clearpart --all --initlabel --disklabel=gpt --drives={{ storage.disk }}

{% if storage.partitions is defined %}
# Partitions for {{ storage.name }}
{% for partition in storage.partitions %}
{% if partition.type is defined and partition.type == 'pv' %}
part {{ partition.name }}     --label={{ partition.name.replace('.', '_') }}  --size={{ partition.size }}{% if partition.grow is defined and partition.grow %}  --grow{% endif %}{% if partition.primary is defined and partition.primary %}         --asprimary{% endif %}  --ondisk={{ storage.disk }}

{% else %}
part {{ partition.mount }}   --label={{ partition.name }}      --size={{ partition.size }}{% if partition.fstype is defined %}  --fstype={{ partition.fstype }}{% endif %}{% if partition.primary is defined and partition.primary %}   --asprimary{% endif %}

{% endif %}
{% endfor %}
{% endif %}

{% if storage.vg is defined %}
# Volume Groups and Logical Volumes for {{ storage.name }}
{% for vg in storage.vg %}
{% set pv_name = storage.partitions | selectattr('type', 'defined') | selectattr('type', 'equalto', 'pv') | map(attribute='name') | first | default('pv.root') %}
volgroup {{ vg.name }} {{ pv_name }}
{% if vg.lv is defined %}
{% for lv in vg.lv %}
logvol {{ lv.mount }}  --label={{ lv.name }}      --size={{ lv.size }}{% if lv.fstype is defined %}  --fstype={{ lv.fstype }}{% endif %}{% if lv.grow is defined and lv.grow %}  --grow{% endif %} --vgname={{ vg.name }} --name={{ lv.name }}
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}

{% else %}
# Additional storage device: {{ storage.name }} (no disk mapping - PVE only)
{% if storage.vg is defined %}
# Additional Volume Groups for {{ storage.name }}
{% for vg in storage.vg %}
{% if vg.lv is defined %}
{% for lv in vg.lv %}
# Additional logical volume {{ lv.name }} will be created post-installation
{% endfor %}
{% endif %}
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}

# INSTALLATION SOURCE, EXTRA REPOSITOROIES, PACKAGE GROUPS, PACKAGES
# Installation Source
{% if proxmox_automatic_url_mirrorlist is defined and proxmox_automatic_url_mirrorlist != "" %}
url --mirrorlist={{ proxmox_automatic_url_mirrorlist }}
{% endif %}
{% if proxmox_automatic_url_baseos is defined and proxmox_automatic_url_baseos != "" %}
url --url={{ proxmox_automatic_url_baseos }}
{% endif %}

# Repositories - Automatisch per Schleife eingefÃ¼gt
{% for repo in proxmox_automatic_repos %}
repo --name={{ repo.name }}{% if repo.mirrorlist is defined %} --mirrorlist={{ repo.mirrorlist }}{% endif %}{% if repo.baseurl is defined %} --baseurl={{ repo.baseurl }}{% endif %}{% if repo.cost is defined %} --cost={{ repo.cost }}{% endif %}

{% endfor %}

# Remove `@guest-agents` group if this is not a VM.
%packages --retries={{ proxmox_automatic_package_retries }} --timeout={{ proxmox_automatic_package_timeout }} --inst-langs={{ proxmox_automatic_install_languages }}
{{ proxmox_automatic_minimal_environment }}
kernel-devel
openssh-server
# Add additional packages here
{% if proxmox_automatic_packages %}
{{ proxmox_automatic_packages | join('\n') }}
{% endif %}
%end

# GROUPS, USERS, ENABLE SSH, FINISH INSTALL
rootpw --lock

# Create users from hierarchical configuration
{% for user in proxmox_automatic_users_merged | default(proxmox_automatic_users) %}
{%- set user_line = "user --name=" + user.name -%}
{%- if user.password is defined and user.password != "" -%}
  {%- set user_line = user_line + " --password='" + user.password + "'" -%}
  {%- if user.password_encrypted is defined and user.password_encrypted -%}
    {%- set user_line = user_line + " --iscrypted" -%}
  {%- else -%}
    {%- set user_line = user_line + " --plaintext" -%}
  {%- endif -%}
{%- endif -%}
{%- if user.gecos is defined -%}
  {%- set user_line = user_line + " --gecos='" + user.gecos + "'" -%}
{%- endif -%}
{%- if user.groups is defined and user.groups | length > 0 -%}
  {%- set groups_str = user.groups | join(",") -%}
  {%- set user_line = user_line + " --groups='" + groups_str + "'" -%}
{%- endif -%}
{%- if user.uid is defined -%}
  {%- set user_line = user_line + " --uid=" + user.uid|string -%}
{%- endif -%}
{%- if user.gid is defined -%}
  {%- set user_line = user_line + " --gid=" + user.gid|string -%}
{%- endif %}
{{ user_line }}
{% if user.ssh_key is defined and user.ssh_key != "" %}
sshkey --username={{ user.name }} '{{ user.ssh_key }}'
{% endif %}
{% endfor %}

services --enabled='{{ proxmox_automatic_enabled_services | join(",") }}'{% if proxmox_automatic_disabled_services | length > 0 %} --disabled='{{ proxmox_automatic_disabled_services | join(",") }}'{% endif %}

reboot

# ENABLE EMERGENCY KERNEL DUMPS FOR DEBUGGING
%addon com_redhat_kdump --reserve-mb=auto --enable
%end

# POST-INSTALLATION SCRIPT
%post --interpreter=/usr/bin/bash --log=/root/anaconda-ks-post.log --erroronfail

# Create sudoers files for all users
{% for user in proxmox_automatic_users_merged | default(proxmox_automatic_users) %}
{% if user.sudo_commands is defined %}
{% if user.sudo_nopasswd is defined and user.sudo_nopasswd %}
/usr/bin/echo "{{ user.name }} ALL=(ALL) NOPASSWD: {{ user.sudo_commands }}" > /etc/sudoers.d/user_{{ user.name }}
{% else %}
/usr/bin/echo "{{ user.name }} ALL=(ALL) {{ user.sudo_commands }}" > /etc/sudoers.d/user_{{ user.name }}
{% endif %}
/usr/bin/chmod 440 /etc/sudoers.d/user_{{ user.name }}
{% endif %}
{% endfor %}

# Install Updates
/usr/bin/dnf update -y

%end
